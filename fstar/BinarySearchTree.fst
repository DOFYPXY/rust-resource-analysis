(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [binary_search_tree] *)
module BinarySearchTree
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** The state type used in the state-error monad *)
assume type state : Type0

(** [binary_search_tree::BinarySearchTree] *)
type binary_search_tree_t (t : Type0) =
| BinarySearchTreeLeaf : binary_search_tree_t t
| BinarySearchTreeTree :
  t ->
  binary_search_tree_t t ->
  binary_search_tree_t t ->
  binary_search_tree_t t

(** [binary_search_tree::MyOrdering] *)
type my_ordering_t =
| MyOrderingEqual : my_ordering_t
| MyOrderingGreater : my_ordering_t
| MyOrderingLess : my_ordering_t

(** [binary_search_tree::tick] *)
let tick_fwd : result unit = Return ()

(** [binary_search_tree::comp] *)
let comp_fwd (t : Type0) (x : t) (y : t) : result my_ordering_t =
  Return MyOrderingLess

(** [binary_search_tree::search] *)
let rec search_fwd
  (t : Type0) (l : binary_search_tree_t t) (value : t) : result bool =
  let* _ = tick_fwd in
  begin match l with
  | BinarySearchTreeLeaf -> Return false
  | BinarySearchTreeTree key left right ->
    let* mo = comp_fwd t key value in
    begin match mo with
    | MyOrderingEqual -> Return true
    | MyOrderingGreater -> search_fwd t left value
    | MyOrderingLess -> search_fwd t right value
    end
  end

(** [binary_search_tree::insert] *)
let rec insert_fwd_back
  (t : Type0) (l : binary_search_tree_t t) (value : t) :
  result (binary_search_tree_t t)
  =
  let* _ = tick_fwd in
  begin match l with
  | BinarySearchTreeLeaf -> Return BinarySearchTreeLeaf
  | BinarySearchTreeTree key left right ->
    let* mo = comp_fwd t value key in
    begin match mo with
    | MyOrderingEqual ->
      begin match right with
      | BinarySearchTreeLeaf ->
        let bst = BinarySearchTreeLeaf in
        let bst0 = BinarySearchTreeLeaf in
        Return (BinarySearchTreeTree key left (BinarySearchTreeTree value bst
          bst0))
      | BinarySearchTreeTree x bst bst0 ->
        let* target_node =
          insert_fwd_back t (BinarySearchTreeTree x bst bst0) value in
        Return (BinarySearchTreeTree key left target_node)
      end
    | MyOrderingGreater ->
      begin match right with
      | BinarySearchTreeLeaf ->
        let bst = BinarySearchTreeLeaf in
        let bst0 = BinarySearchTreeLeaf in
        Return (BinarySearchTreeTree key left (BinarySearchTreeTree value bst
          bst0))
      | BinarySearchTreeTree x bst bst0 ->
        let* target_node =
          insert_fwd_back t (BinarySearchTreeTree x bst bst0) value in
        Return (BinarySearchTreeTree key left target_node)
      end
    | MyOrderingLess ->
      begin match left with
      | BinarySearchTreeLeaf ->
        let bst = BinarySearchTreeLeaf in
        let bst0 = BinarySearchTreeLeaf in
        Return (BinarySearchTreeTree key (BinarySearchTreeTree value bst bst0)
          right)
      | BinarySearchTreeTree x bst bst0 ->
        let* target_node =
          insert_fwd_back t (BinarySearchTreeTree x bst bst0) value in
        Return (BinarySearchTreeTree key target_node right)
      end
    end
  end

