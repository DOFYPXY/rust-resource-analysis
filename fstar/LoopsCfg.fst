(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [loops_cfg] *)
module LoopsCfg
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** The state type used in the state-error monad *)
assume type state : Type0

(** [loops_cfg::test_loop1] *)
let rec test_loop1_loop_fwd (max : u32) (i : u32) (s : u32) : result u32 =
  if i < max
  then begin
    let* s0 = u32_add s i in
    let* i0 = u32_add i 1 in
    test_loop1_loop_fwd max i0 s0 end
  else u32_mul s 2

(** [loops_cfg::test_loop1] *)
let test_loop1_fwd (max : u32) : result u32 = test_loop1_loop_fwd max 0 0

(** [loops_cfg::test_loop2] *)
let rec test_loop2_loop_fwd (max : u32) (i : u32) (s : u32) : result u32 =
  if i < max
  then
    if i = 17
    then Return s
    else begin
      let* s0 = u32_add s i in
      let* i0 = u32_add i 1 in
      test_loop2_loop_fwd max i0 s0 end
  else Return s

(** [loops_cfg::test_loop2] *)
let test_loop2_fwd (max : u32) : result u32 = test_loop2_loop_fwd max 0 0

(** [loops_cfg::test_loop6] *)
let rec test_loop6_loop_fwd (max : u32) (i : u32) (s : u32) : result u32 =
  if i < max
  then
    if i > 3
    then u32_add s 1
    else begin
      let* s0 = u32_add s i in
      let* i0 = u32_add i 1 in
      test_loop6_loop_fwd max i0 s0 end
  else u32_add s 1

(** [loops_cfg::test_loop6] *)
let test_loop6_fwd (max : u32) : result u32 = test_loop6_loop_fwd max 0 0

(** [loops_cfg::test_loops] *)
let test_loops_fwd : result unit =
  let* x = test_loop1_fwd 2 in
  if not (x = 2)
  then Fail Failure
  else begin
    let* x0 = test_loop2_fwd 2 in
    if not (x0 = 1)
    then Fail Failure
    else begin
      let* x1 = test_loop6_fwd 2 in
      if not (x1 = 2) then Fail Failure else Return () end end

