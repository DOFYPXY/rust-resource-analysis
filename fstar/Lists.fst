(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [lists] *)
module Lists
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** The state type used in the state-error monad *)
assume type state : Type0

(** [lists::List] *)
type list_t = | ListCons : u32 -> list_t -> list_t | ListNil : list_t

(** [lists::tick] *)
let tick_fwd : result unit = Return ()

(** [lists::list_nth_mut] *)
let rec list_nth_mut_fwd (l : list_t) (i : u32) : result u32 =
  begin match l with
  | ListCons x tl ->
    if i = 0
    then Return x
    else begin let* i0 = u32_sub i 1 in list_nth_mut_fwd tl i0 end
  | ListNil -> Fail Failure
  end

(** [lists::list_nth_mut] *)
let rec list_nth_mut_back (l : list_t) (i : u32) (ret : u32) : result list_t =
  begin match l with
  | ListCons x tl ->
    if i = 0
    then Return (ListCons ret tl)
    else begin
      let* i0 = u32_sub i 1 in
      let* tl0 = list_nth_mut_back tl i0 ret in
      Return (ListCons x tl0) end
  | ListNil -> Fail Failure
  end

(** [lists::list_nth_mut_loop] *)
let rec list_nth_mut_loop_loop_fwd (ls : list_t) (i : u32) : result u32 =
  begin match ls with
  | ListCons x tl ->
    if i = 0
    then Return x
    else begin
      let* _ = tick_fwd in
      let* i0 = u32_sub i 1 in
      list_nth_mut_loop_loop_fwd tl i0 end
  | ListNil -> Fail Failure
  end

(** [lists::list_nth_mut_loop] *)
let list_nth_mut_loop_fwd (ls : list_t) (i : u32) : result u32 =
  list_nth_mut_loop_loop_fwd ls i

(** [lists::list_nth_mut_loop] *)
let rec list_nth_mut_loop_loop_back
  (ls : list_t) (i : u32) (ret : u32) : result list_t =
  begin match ls with
  | ListCons x tl ->
    if i = 0
    then Return (ListCons ret tl)
    else begin
      let* _ = tick_fwd in
      let* i0 = u32_sub i 1 in
      let* tl0 = list_nth_mut_loop_loop_back tl i0 ret in
      Return (ListCons x tl0) end
  | ListNil -> Fail Failure
  end

(** [lists::list_nth_mut_loop] *)
let list_nth_mut_loop_back
  (ls : list_t) (i : u32) (ret : u32) : result list_t =
  list_nth_mut_loop_loop_back ls i ret

(** [lists::list_plus_1] *)
let rec list_plus_1_fwd (l : list_t) : result u32 =
  begin match l with
  | ListCons x tl -> let* _ = u32_add x 1 in list_plus_1_fwd tl
  | ListNil -> Return 233
  end

(** [lists::list_plus_1] *)
let rec list_plus_1_back (l : list_t) : result list_t =
  begin match l with
  | ListCons x tl ->
    let* x0 = u32_add x 1 in
    let* tl0 = list_plus_1_back tl in
    Return (ListCons x0 tl0)
  | ListNil -> Return ListNil
  end

(** [lists::list_tricky] *)
let rec list_tricky_back (l : list_t) : result list_t =
  begin match l with
  | ListCons x tl ->
    let* x0 = u32_add x 1 in
    let* tl0 = list_tricky_back tl in
    begin match tl0 with
    | ListCons i l0 -> Return (ListCons x0 (ListCons i l0))
    | ListNil -> Return (ListCons x0 ListNil)
    end
  | ListNil -> Return ListNil
  end

(** [lists::list_tricky] *)
let rec list_tricky_fwd (l : list_t) : result u32 =
  begin match l with
  | ListCons x tl ->
    let* _ = u32_add x 1 in
    let* ret = list_tricky_fwd tl in
    let* tl0 = list_tricky_back tl in
    begin match tl0 with
    | ListCons i l0 -> Return ret
    | ListNil -> Return ret
    end
  | ListNil -> Return 233
  end

